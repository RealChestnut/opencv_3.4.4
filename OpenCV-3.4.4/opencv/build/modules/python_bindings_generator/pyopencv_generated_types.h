CVPY_TYPE(Algorithm, Algorithm, Ptr<cv::Algorithm>, Ptr, NoBase, 0, "");
CVPY_TYPE(AsyncArray, AsyncArray, Ptr<cv::AsyncArray>, Ptr, NoBase, pyopencv_cv_AsyncArray_AsyncArray, "");
CVPY_TYPE(ClassWithKeywordProperties, utils_ClassWithKeywordProperties, cv::utils::ClassWithKeywordProperties, ClassWithKeywordProperties, NoBase, pyopencv_cv_utils_utils_ClassWithKeywordProperties_ClassWithKeywordProperties, ".utils");
CVPY_TYPE(ExportClassName, utils_nested_OriginalClassName, Ptr<cv::utils::nested::OriginalClassName>, Ptr, NoBase, 0, ".utils.nested");
CVPY_TYPE(Params, utils_nested_OriginalClassName_Params, cv::utils::nested::OriginalClassName::Params, Params, NoBase, pyopencv_cv_utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params, ".utils.nested.ExportClassName");
CVPY_TYPE(Device, ocl_Device, cv::ocl::Device, Device, NoBase, pyopencv_cv_ocl_ocl_Device_Device, ".ocl");
CVPY_TYPE(FileStorage, FileStorage, Ptr<cv::FileStorage>, Ptr, NoBase, pyopencv_cv_FileStorage_FileStorage, "");
CVPY_TYPE(FileNode, FileNode, cv::FileNode, FileNode, NoBase, pyopencv_cv_FileNode_FileNode, "");
CVPY_TYPE(KeyPoint, KeyPoint, cv::KeyPoint, KeyPoint, NoBase, pyopencv_cv_KeyPoint_KeyPoint, "");
CVPY_TYPE(DMatch, DMatch, cv::DMatch, DMatch, NoBase, pyopencv_cv_DMatch_DMatch, "");
CVPY_TYPE(TickMeter, TickMeter, Ptr<cv::TickMeter>, Ptr, NoBase, pyopencv_cv_TickMeter_TickMeter, "");
CVPY_TYPE(UMat, UMat, Ptr<cv::UMat>, Ptr, NoBase, pyopencv_cv_UMat_UMat, "");
CVPY_TYPE(HDF5, hdf_HDF5, Ptr<cv::hdf::HDF5>, Ptr, NoBase, 0, ".hdf");
CVPY_TYPE(GeneralizedHough, GeneralizedHough, Ptr<cv::GeneralizedHough>, Ptr, Algorithm, 0, "");
CVPY_TYPE(GeneralizedHoughBallard, GeneralizedHoughBallard, Ptr<cv::GeneralizedHoughBallard>, Ptr, GeneralizedHough, 0, "");
CVPY_TYPE(GeneralizedHoughGuil, GeneralizedHoughGuil, Ptr<cv::GeneralizedHoughGuil>, Ptr, GeneralizedHough, 0, "");
CVPY_TYPE(CLAHE, CLAHE, Ptr<cv::CLAHE>, Ptr, Algorithm, 0, "");
CVPY_TYPE(Subdiv2D, Subdiv2D, Ptr<cv::Subdiv2D>, Ptr, NoBase, pyopencv_cv_Subdiv2D_Subdiv2D, "");
CVPY_TYPE(LineSegmentDetector, LineSegmentDetector, Ptr<cv::LineSegmentDetector>, Ptr, Algorithm, 0, "");
CVPY_TYPE(ParamGrid, ml_ParamGrid, Ptr<cv::ml::ParamGrid>, Ptr, NoBase, 0, ".ml");
CVPY_TYPE(TrainData, ml_TrainData, Ptr<cv::ml::TrainData>, Ptr, NoBase, 0, ".ml");
CVPY_TYPE(StatModel, ml_StatModel, Ptr<cv::ml::StatModel>, Ptr, Algorithm, 0, ".ml");
CVPY_TYPE(NormalBayesClassifier, ml_NormalBayesClassifier, Ptr<cv::ml::NormalBayesClassifier>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(KNearest, ml_KNearest, Ptr<cv::ml::KNearest>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(SVM, ml_SVM, Ptr<cv::ml::SVM>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(EM, ml_EM, Ptr<cv::ml::EM>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(DTrees, ml_DTrees, Ptr<cv::ml::DTrees>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(RTrees, ml_RTrees, Ptr<cv::ml::RTrees>, Ptr, ml_DTrees, 0, ".ml");
CVPY_TYPE(Boost, ml_Boost, Ptr<cv::ml::Boost>, Ptr, ml_DTrees, 0, ".ml");
CVPY_TYPE(ANN_MLP, ml_ANN_MLP, Ptr<cv::ml::ANN_MLP>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(LogisticRegression, ml_LogisticRegression, Ptr<cv::ml::LogisticRegression>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(SVMSGD, ml_SVMSGD, Ptr<cv::ml::SVMSGD>, Ptr, ml_StatModel, 0, ".ml");
CVPY_TYPE(ANN_MLP_ANNEAL, ml_ANN_MLP_ANNEAL, Ptr<cv::ml::ANN_MLP_ANNEAL>, Ptr, ml_ANN_MLP, 0, ".ml");
CVPY_TYPE(PhaseUnwrapping, phase_unwrapping_PhaseUnwrapping, Ptr<cv::phase_unwrapping::PhaseUnwrapping>, Ptr, Algorithm, 0, ".phase_unwrapping");
CVPY_TYPE(HistogramPhaseUnwrapping, phase_unwrapping_HistogramPhaseUnwrapping, Ptr<cv::phase_unwrapping::HistogramPhaseUnwrapping>, Ptr, phase_unwrapping_PhaseUnwrapping, 0, ".phase_unwrapping");
CVPY_TYPE(Params, phase_unwrapping_HistogramPhaseUnwrapping_Params, cv::phase_unwrapping::HistogramPhaseUnwrapping::Params, Params, NoBase, pyopencv_cv_phase_unwrapping_phase_unwrapping_HistogramPhaseUnwrapping_Params_HistogramPhaseUnwrapping_Params, ".phase_unwrapping.HistogramPhaseUnwrapping");
CVPY_TYPE(Tonemap, Tonemap, Ptr<cv::Tonemap>, Ptr, Algorithm, 0, "");
CVPY_TYPE(TonemapDrago, TonemapDrago, Ptr<cv::TonemapDrago>, Ptr, Tonemap, 0, "");
CVPY_TYPE(TonemapReinhard, TonemapReinhard, Ptr<cv::TonemapReinhard>, Ptr, Tonemap, 0, "");
CVPY_TYPE(TonemapMantiuk, TonemapMantiuk, Ptr<cv::TonemapMantiuk>, Ptr, Tonemap, 0, "");
CVPY_TYPE(AlignExposures, AlignExposures, Ptr<cv::AlignExposures>, Ptr, Algorithm, 0, "");
CVPY_TYPE(AlignMTB, AlignMTB, Ptr<cv::AlignMTB>, Ptr, AlignExposures, 0, "");
CVPY_TYPE(CalibrateCRF, CalibrateCRF, Ptr<cv::CalibrateCRF>, Ptr, Algorithm, 0, "");
CVPY_TYPE(CalibrateDebevec, CalibrateDebevec, Ptr<cv::CalibrateDebevec>, Ptr, CalibrateCRF, 0, "");
CVPY_TYPE(CalibrateRobertson, CalibrateRobertson, Ptr<cv::CalibrateRobertson>, Ptr, CalibrateCRF, 0, "");
CVPY_TYPE(MergeExposures, MergeExposures, Ptr<cv::MergeExposures>, Ptr, Algorithm, 0, "");
CVPY_TYPE(MergeDebevec, MergeDebevec, Ptr<cv::MergeDebevec>, Ptr, MergeExposures, 0, "");
CVPY_TYPE(MergeMertens, MergeMertens, Ptr<cv::MergeMertens>, Ptr, MergeExposures, 0, "");
CVPY_TYPE(MergeRobertson, MergeRobertson, Ptr<cv::MergeRobertson>, Ptr, MergeExposures, 0, "");
CVPY_TYPE(Plot2d, plot_Plot2d, Ptr<cv::plot::Plot2d>, Ptr, Algorithm, 0, ".plot");
CVPY_TYPE(Map, reg_Map, Ptr<cv::reg::Map>, Ptr, NoBase, 0, ".reg");
CVPY_TYPE(MapAffine, reg_MapAffine, Ptr<cv::reg::MapAffine>, Ptr, reg_Map, pyopencv_cv_reg_reg_MapAffine_MapAffine, ".reg");
CVPY_TYPE(Mapper, reg_Mapper, Ptr<cv::reg::Mapper>, Ptr, NoBase, 0, ".reg");
CVPY_TYPE(MapperGradAffine, reg_MapperGradAffine, Ptr<cv::reg::MapperGradAffine>, Ptr, reg_Mapper, pyopencv_cv_reg_reg_MapperGradAffine_MapperGradAffine, ".reg");
CVPY_TYPE(MapperGradEuclid, reg_MapperGradEuclid, Ptr<cv::reg::MapperGradEuclid>, Ptr, reg_Mapper, pyopencv_cv_reg_reg_MapperGradEuclid_MapperGradEuclid, ".reg");
CVPY_TYPE(MapperGradProj, reg_MapperGradProj, Ptr<cv::reg::MapperGradProj>, Ptr, reg_Mapper, pyopencv_cv_reg_reg_MapperGradProj_MapperGradProj, ".reg");
CVPY_TYPE(MapperGradShift, reg_MapperGradShift, Ptr<cv::reg::MapperGradShift>, Ptr, reg_Mapper, pyopencv_cv_reg_reg_MapperGradShift_MapperGradShift, ".reg");
CVPY_TYPE(MapperGradSimilar, reg_MapperGradSimilar, Ptr<cv::reg::MapperGradSimilar>, Ptr, reg_Mapper, pyopencv_cv_reg_reg_MapperGradSimilar_MapperGradSimilar, ".reg");
CVPY_TYPE(MapperPyramid, reg_MapperPyramid, Ptr<cv::reg::MapperPyramid>, Ptr, reg_Mapper, pyopencv_cv_reg_reg_MapperPyramid_MapperPyramid, ".reg");
CVPY_TYPE(MapTypeCaster, reg_MapTypeCaster, Ptr<cv::reg::MapTypeCaster>, Ptr, NoBase, 0, ".reg");
CVPY_TYPE(MapProjec, reg_MapProjec, Ptr<cv::reg::MapProjec>, Ptr, reg_Map, pyopencv_cv_reg_reg_MapProjec_MapProjec, ".reg");
CVPY_TYPE(MapShift, reg_MapShift, Ptr<cv::reg::MapShift>, Ptr, reg_Map, pyopencv_cv_reg_reg_MapShift_MapShift, ".reg");
CVPY_TYPE(ICP, ppf_match_3d_ICP, Ptr<cv::ppf_match_3d::ICP>, Ptr, NoBase, pyopencv_cv_ppf_match_3d_ppf_match_3d_ICP_ICP, ".ppf_match_3d");
CVPY_TYPE(Pose3D, ppf_match_3d_Pose3D, Ptr<cv::ppf_match_3d::Pose3D>, Ptr, NoBase, 0, ".ppf_match_3d");
CVPY_TYPE(PoseCluster3D, ppf_match_3d_PoseCluster3D, Ptr<cv::ppf_match_3d::PoseCluster3D>, Ptr, NoBase, 0, ".ppf_match_3d");
CVPY_TYPE(PPF3DDetector, ppf_match_3d_PPF3DDetector, Ptr<cv::ppf_match_3d::PPF3DDetector>, Ptr, NoBase, 0, ".ppf_match_3d");
CVPY_TYPE(BackgroundSubtractor, BackgroundSubtractor, Ptr<cv::BackgroundSubtractor>, Ptr, Algorithm, 0, "");
CVPY_TYPE(BackgroundSubtractorMOG2, BackgroundSubtractorMOG2, Ptr<cv::BackgroundSubtractorMOG2>, Ptr, BackgroundSubtractor, 0, "");
CVPY_TYPE(BackgroundSubtractorKNN, BackgroundSubtractorKNN, Ptr<cv::BackgroundSubtractorKNN>, Ptr, BackgroundSubtractor, 0, "");
CVPY_TYPE(KalmanFilter, KalmanFilter, Ptr<cv::KalmanFilter>, Ptr, NoBase, pyopencv_cv_KalmanFilter_KalmanFilter, "");
CVPY_TYPE(DenseOpticalFlow, DenseOpticalFlow, Ptr<cv::DenseOpticalFlow>, Ptr, Algorithm, 0, "");
CVPY_TYPE(SparseOpticalFlow, SparseOpticalFlow, Ptr<cv::SparseOpticalFlow>, Ptr, Algorithm, 0, "");
CVPY_TYPE(DualTVL1OpticalFlow, DualTVL1OpticalFlow, Ptr<cv::DualTVL1OpticalFlow>, Ptr, DenseOpticalFlow, 0, "");
CVPY_TYPE(FarnebackOpticalFlow, FarnebackOpticalFlow, Ptr<cv::FarnebackOpticalFlow>, Ptr, DenseOpticalFlow, 0, "");
CVPY_TYPE(SparsePyrLKOpticalFlow, SparsePyrLKOpticalFlow, Ptr<cv::SparsePyrLKOpticalFlow>, Ptr, SparseOpticalFlow, 0, "");
CVPY_TYPE(TonemapDurand, xphoto_TonemapDurand, Ptr<cv::xphoto::TonemapDurand>, Ptr, Tonemap, 0, ".xphoto");
CVPY_TYPE(WhiteBalancer, xphoto_WhiteBalancer, Ptr<cv::xphoto::WhiteBalancer>, Ptr, Algorithm, 0, ".xphoto");
CVPY_TYPE(SimpleWB, xphoto_SimpleWB, Ptr<cv::xphoto::SimpleWB>, Ptr, xphoto_WhiteBalancer, 0, ".xphoto");
CVPY_TYPE(GrayworldWB, xphoto_GrayworldWB, Ptr<cv::xphoto::GrayworldWB>, Ptr, xphoto_WhiteBalancer, 0, ".xphoto");
CVPY_TYPE(LearningBasedWB, xphoto_LearningBasedWB, Ptr<cv::xphoto::LearningBasedWB>, Ptr, xphoto_WhiteBalancer, 0, ".xphoto");
CVPY_TYPE(DictValue, dnn_DictValue, Ptr<cv::dnn::DictValue>, Ptr, NoBase, pyopencv_cv_dnn_dnn_DictValue_DictValue, ".dnn");
CVPY_TYPE(Layer, dnn_Layer, Ptr<cv::dnn::Layer>, Ptr, Algorithm, 0, ".dnn");
CVPY_TYPE(Net, dnn_Net, cv::dnn::Net, Net, NoBase, pyopencv_cv_dnn_dnn_Net_Net, ".dnn");
CVPY_TYPE(Feature2D, Feature2D, Ptr<cv::Feature2D>, Ptr, NoBase, 0, "");
CVPY_TYPE(AffineFeature, AffineFeature, Ptr<cv::AffineFeature>, Ptr, Feature2D, 0, "");
CVPY_TYPE(SIFT, SIFT, Ptr<cv::SIFT>, Ptr, Feature2D, 0, "");
CVPY_TYPE(BRISK, BRISK, Ptr<cv::BRISK>, Ptr, Feature2D, 0, "");
CVPY_TYPE(ORB, ORB, Ptr<cv::ORB>, Ptr, Feature2D, 0, "");
CVPY_TYPE(MSER, MSER, Ptr<cv::MSER>, Ptr, Feature2D, 0, "");
CVPY_TYPE(FastFeatureDetector, FastFeatureDetector, Ptr<cv::FastFeatureDetector>, Ptr, Feature2D, 0, "");
CVPY_TYPE(AgastFeatureDetector, AgastFeatureDetector, Ptr<cv::AgastFeatureDetector>, Ptr, Feature2D, 0, "");
CVPY_TYPE(GFTTDetector, GFTTDetector, Ptr<cv::GFTTDetector>, Ptr, Feature2D, 0, "");
CVPY_TYPE(SimpleBlobDetector, SimpleBlobDetector, Ptr<cv::SimpleBlobDetector>, Ptr, Feature2D, 0, "");
CVPY_TYPE(Params, SimpleBlobDetector_Params, cv::SimpleBlobDetector::Params, Params, NoBase, pyopencv_cv_SimpleBlobDetector_Params_SimpleBlobDetector_Params, ".SimpleBlobDetector");
CVPY_TYPE(KAZE, KAZE, Ptr<cv::KAZE>, Ptr, Feature2D, 0, "");
CVPY_TYPE(AKAZE, AKAZE, Ptr<cv::AKAZE>, Ptr, Feature2D, 0, "");
CVPY_TYPE(DescriptorMatcher, DescriptorMatcher, Ptr<cv::DescriptorMatcher>, Ptr, Algorithm, 0, "");
CVPY_TYPE(BFMatcher, BFMatcher, Ptr<cv::BFMatcher>, Ptr, DescriptorMatcher, pyopencv_cv_BFMatcher_BFMatcher, "");
CVPY_TYPE(FlannBasedMatcher, FlannBasedMatcher, Ptr<cv::FlannBasedMatcher>, Ptr, DescriptorMatcher, pyopencv_cv_FlannBasedMatcher_FlannBasedMatcher, "");
CVPY_TYPE(BOWTrainer, BOWTrainer, Ptr<cv::BOWTrainer>, Ptr, NoBase, 0, "");
CVPY_TYPE(BOWKMeansTrainer, BOWKMeansTrainer, Ptr<cv::BOWKMeansTrainer>, Ptr, BOWTrainer, pyopencv_cv_BOWKMeansTrainer_BOWKMeansTrainer, "");
CVPY_TYPE(BOWImgDescriptorExtractor, BOWImgDescriptorExtractor, Ptr<cv::BOWImgDescriptorExtractor>, Ptr, NoBase, pyopencv_cv_BOWImgDescriptorExtractor_BOWImgDescriptorExtractor, "");
CVPY_TYPE(FreeType2, freetype_FreeType2, Ptr<cv::freetype::FreeType2>, Ptr, Algorithm, 0, ".freetype");
CVPY_TYPE(HfsSegment, hfs_HfsSegment, Ptr<cv::hfs::HfsSegment>, Ptr, Algorithm, 0, ".hfs");
CVPY_TYPE(ImgHashBase, img_hash_ImgHashBase, Ptr<cv::img_hash::ImgHashBase>, Ptr, Algorithm, 0, ".img_hash");
CVPY_TYPE(AverageHash, img_hash_AverageHash, Ptr<cv::img_hash::AverageHash>, Ptr, img_hash_ImgHashBase, 0, ".img_hash");
CVPY_TYPE(BlockMeanHash, img_hash_BlockMeanHash, Ptr<cv::img_hash::BlockMeanHash>, Ptr, img_hash_ImgHashBase, 0, ".img_hash");
CVPY_TYPE(ColorMomentHash, img_hash_ColorMomentHash, Ptr<cv::img_hash::ColorMomentHash>, Ptr, img_hash_ImgHashBase, 0, ".img_hash");
CVPY_TYPE(MarrHildrethHash, img_hash_MarrHildrethHash, Ptr<cv::img_hash::MarrHildrethHash>, Ptr, img_hash_ImgHashBase, 0, ".img_hash");
CVPY_TYPE(PHash, img_hash_PHash, Ptr<cv::img_hash::PHash>, Ptr, img_hash_ImgHashBase, 0, ".img_hash");
CVPY_TYPE(RadialVarianceHash, img_hash_RadialVarianceHash, Ptr<cv::img_hash::RadialVarianceHash>, Ptr, img_hash_ImgHashBase, 0, ".img_hash");
CVPY_TYPE(KeyLine, line_descriptor_KeyLine, cv::line_descriptor::KeyLine, KeyLine, NoBase, pyopencv_cv_line_descriptor_line_descriptor_KeyLine_KeyLine, ".line_descriptor");
CVPY_TYPE(BinaryDescriptor, line_descriptor_BinaryDescriptor, Ptr<cv::line_descriptor::BinaryDescriptor>, Ptr, Algorithm, 0, ".line_descriptor");
CVPY_TYPE(LSDParam, line_descriptor_LSDParam, cv::line_descriptor::LSDParam, LSDParam, NoBase, pyopencv_cv_line_descriptor_line_descriptor_LSDParam_LSDParam, ".line_descriptor");
CVPY_TYPE(LSDDetector, line_descriptor_LSDDetector, Ptr<cv::line_descriptor::LSDDetector>, Ptr, Algorithm, pyopencv_cv_line_descriptor_line_descriptor_LSDDetector_LSDDetectorWithParams, ".line_descriptor");
CVPY_TYPE(BinaryDescriptorMatcher, line_descriptor_BinaryDescriptorMatcher, Ptr<cv::line_descriptor::BinaryDescriptorMatcher>, Ptr, Algorithm, pyopencv_cv_line_descriptor_line_descriptor_BinaryDescriptorMatcher_BinaryDescriptorMatcher, ".line_descriptor");
CVPY_TYPE(DrawLinesMatchesFlags, line_descriptor_DrawLinesMatchesFlags, cv::line_descriptor::DrawLinesMatchesFlags, DrawLinesMatchesFlags, NoBase, 0, ".line_descriptor");
CVPY_TYPE(Saliency, saliency_Saliency, Ptr<cv::saliency::Saliency>, Ptr, Algorithm, 0, ".saliency");
CVPY_TYPE(StaticSaliency, saliency_StaticSaliency, Ptr<cv::saliency::StaticSaliency>, Ptr, saliency_Saliency, 0, ".saliency");
CVPY_TYPE(MotionSaliency, saliency_MotionSaliency, Ptr<cv::saliency::MotionSaliency>, Ptr, saliency_Saliency, 0, ".saliency");
CVPY_TYPE(Objectness, saliency_Objectness, Ptr<cv::saliency::Objectness>, Ptr, saliency_Saliency, 0, ".saliency");
CVPY_TYPE(StaticSaliencySpectralResidual, saliency_StaticSaliencySpectralResidual, Ptr<cv::saliency::StaticSaliencySpectralResidual>, Ptr, saliency_StaticSaliency, 0, ".saliency");
CVPY_TYPE(StaticSaliencyFineGrained, saliency_StaticSaliencyFineGrained, Ptr<cv::saliency::StaticSaliencyFineGrained>, Ptr, saliency_StaticSaliency, 0, ".saliency");
CVPY_TYPE(MotionSaliencyBinWangApr2014, saliency_MotionSaliencyBinWangApr2014, Ptr<cv::saliency::MotionSaliencyBinWangApr2014>, Ptr, saliency_MotionSaliency, 0, ".saliency");
CVPY_TYPE(ObjectnessBING, saliency_ObjectnessBING, Ptr<cv::saliency::ObjectnessBING>, Ptr, saliency_Objectness, 0, ".saliency");
CVPY_TYPE(HistogramCostExtractor, HistogramCostExtractor, Ptr<cv::HistogramCostExtractor>, Ptr, Algorithm, 0, "");
CVPY_TYPE(NormHistogramCostExtractor, NormHistogramCostExtractor, Ptr<cv::NormHistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, "");
CVPY_TYPE(EMDHistogramCostExtractor, EMDHistogramCostExtractor, Ptr<cv::EMDHistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, "");
CVPY_TYPE(ChiHistogramCostExtractor, ChiHistogramCostExtractor, Ptr<cv::ChiHistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, "");
CVPY_TYPE(EMDL1HistogramCostExtractor, EMDL1HistogramCostExtractor, Ptr<cv::EMDL1HistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, "");
CVPY_TYPE(ShapeDistanceExtractor, ShapeDistanceExtractor, Ptr<cv::ShapeDistanceExtractor>, Ptr, Algorithm, 0, "");
CVPY_TYPE(ShapeContextDistanceExtractor, ShapeContextDistanceExtractor, Ptr<cv::ShapeContextDistanceExtractor>, Ptr, ShapeDistanceExtractor, 0, "");
CVPY_TYPE(HausdorffDistanceExtractor, HausdorffDistanceExtractor, Ptr<cv::HausdorffDistanceExtractor>, Ptr, ShapeDistanceExtractor, 0, "");
CVPY_TYPE(ShapeTransformer, ShapeTransformer, Ptr<cv::ShapeTransformer>, Ptr, Algorithm, 0, "");
CVPY_TYPE(ThinPlateSplineShapeTransformer, ThinPlateSplineShapeTransformer, Ptr<cv::ThinPlateSplineShapeTransformer>, Ptr, ShapeTransformer, 0, "");
CVPY_TYPE(AffineTransformer, AffineTransformer, Ptr<cv::AffineTransformer>, Ptr, ShapeTransformer, 0, "");
CVPY_TYPE(ERFilter, text_ERFilter, Ptr<cv::text::ERFilter>, Ptr, Algorithm, 0, ".text");
CVPY_TYPE(Callback, text_ERFilter_Callback, Ptr<cv::text::ERFilter::Callback>, Ptr, NoBase, 0, ".text.ERFilter");
CVPY_TYPE(BaseOCR, text_BaseOCR, Ptr<cv::text::BaseOCR>, Ptr, NoBase, 0, ".text");
CVPY_TYPE(OCRTesseract, text_OCRTesseract, Ptr<cv::text::OCRTesseract>, Ptr, text_BaseOCR, 0, ".text");
CVPY_TYPE(OCRHMMDecoder, text_OCRHMMDecoder, Ptr<cv::text::OCRHMMDecoder>, Ptr, text_BaseOCR, 0, ".text");
CVPY_TYPE(ClassifierCallback, text_OCRHMMDecoder_ClassifierCallback, Ptr<cv::text::OCRHMMDecoder::ClassifierCallback>, Ptr, NoBase, 0, ".text.OCRHMMDecoder");
CVPY_TYPE(OCRBeamSearchDecoder, text_OCRBeamSearchDecoder, Ptr<cv::text::OCRBeamSearchDecoder>, Ptr, text_BaseOCR, 0, ".text");
CVPY_TYPE(ClassifierCallback, text_OCRBeamSearchDecoder_ClassifierCallback, Ptr<cv::text::OCRBeamSearchDecoder::ClassifierCallback>, Ptr, NoBase, 0, ".text.OCRBeamSearchDecoder");
CVPY_TYPE(TextDetector, text_TextDetector, Ptr<cv::text::TextDetector>, Ptr, NoBase, 0, ".text");
CVPY_TYPE(TextDetectorCNN, text_TextDetectorCNN, Ptr<cv::text::TextDetectorCNN>, Ptr, text_TextDetector, 0, ".text");
CVPY_TYPE(VideoCapture, VideoCapture, Ptr<cv::VideoCapture>, Ptr, NoBase, pyopencv_cv_VideoCapture_VideoCapture, "");
CVPY_TYPE(VideoWriter, VideoWriter, Ptr<cv::VideoWriter>, Ptr, NoBase, pyopencv_cv_VideoWriter_VideoWriter, "");
CVPY_TYPE(CirclesGridFinderParameters, CirclesGridFinderParameters, cv::CirclesGridFinderParameters, CirclesGridFinderParameters, NoBase, pyopencv_cv_CirclesGridFinderParameters_CirclesGridFinderParameters, "");
CVPY_TYPE(CirclesGridFinderParameters2, CirclesGridFinderParameters2, cv::CirclesGridFinderParameters2, CirclesGridFinderParameters2, CirclesGridFinderParameters, pyopencv_cv_CirclesGridFinderParameters2_CirclesGridFinderParameters2, "");
CVPY_TYPE(StereoMatcher, StereoMatcher, Ptr<cv::StereoMatcher>, Ptr, Algorithm, 0, "");
CVPY_TYPE(StereoBM, StereoBM, Ptr<cv::StereoBM>, Ptr, StereoMatcher, 0, "");
CVPY_TYPE(StereoSGBM, StereoSGBM, Ptr<cv::StereoSGBM>, Ptr, StereoMatcher, 0, "");
CVPY_TYPE(BaseCascadeClassifier, BaseCascadeClassifier, Ptr<cv::BaseCascadeClassifier>, Ptr, Algorithm, 0, "");
CVPY_TYPE(CascadeClassifier, CascadeClassifier, Ptr<cv::CascadeClassifier>, Ptr, NoBase, pyopencv_cv_CascadeClassifier_CascadeClassifier, "");
CVPY_TYPE(HOGDescriptor, HOGDescriptor, Ptr<cv::HOGDescriptor>, Ptr, NoBase, pyopencv_cv_HOGDescriptor_HOGDescriptor, "");
CVPY_TYPE(QRCodeEncoder, QRCodeEncoder, Ptr<cv::QRCodeEncoder>, Ptr, NoBase, 0, "");
CVPY_TYPE(Params, QRCodeEncoder_Params, cv::QRCodeEncoder::Params, Params, NoBase, pyopencv_cv_QRCodeEncoder_Params_QRCodeEncoder_Params, ".QRCodeEncoder");
CVPY_TYPE(QRCodeDetector, QRCodeDetector, Ptr<cv::QRCodeDetector>, Ptr, NoBase, pyopencv_cv_QRCodeDetector_QRCodeDetector, "");
CVPY_TYPE(RgbdNormals, rgbd_RgbdNormals, Ptr<cv::rgbd::RgbdNormals>, Ptr, Algorithm, 0, ".rgbd");
CVPY_TYPE(DepthCleaner, rgbd_DepthCleaner, Ptr<cv::rgbd::DepthCleaner>, Ptr, Algorithm, 0, ".rgbd");
CVPY_TYPE(RgbdPlane, rgbd_RgbdPlane, Ptr<cv::rgbd::RgbdPlane>, Ptr, Algorithm, 0, ".rgbd");
CVPY_TYPE(RgbdFrame, rgbd_RgbdFrame, Ptr<cv::rgbd::RgbdFrame>, Ptr, NoBase, 0, ".rgbd");
CVPY_TYPE(OdometryFrame, rgbd_OdometryFrame, Ptr<cv::rgbd::OdometryFrame>, Ptr, rgbd_RgbdFrame, 0, ".rgbd");
CVPY_TYPE(Odometry, rgbd_Odometry, Ptr<cv::rgbd::Odometry>, Ptr, Algorithm, 0, ".rgbd");
CVPY_TYPE(RgbdOdometry, rgbd_RgbdOdometry, Ptr<cv::rgbd::RgbdOdometry>, Ptr, rgbd_Odometry, 0, ".rgbd");
CVPY_TYPE(ICPOdometry, rgbd_ICPOdometry, Ptr<cv::rgbd::ICPOdometry>, Ptr, rgbd_Odometry, 0, ".rgbd");
CVPY_TYPE(RgbdICPOdometry, rgbd_RgbdICPOdometry, Ptr<cv::rgbd::RgbdICPOdometry>, Ptr, rgbd_Odometry, 0, ".rgbd");
CVPY_TYPE(Feature, linemod_Feature, cv::linemod::Feature, Feature, NoBase, pyopencv_cv_linemod_linemod_Feature_Feature, ".linemod");
CVPY_TYPE(Template, linemod_Template, cv::linemod::Template, Template, NoBase, 0, ".linemod");
CVPY_TYPE(QuantizedPyramid, linemod_QuantizedPyramid, Ptr<cv::linemod::QuantizedPyramid>, Ptr, NoBase, 0, ".linemod");
CVPY_TYPE(Modality, linemod_Modality, Ptr<cv::linemod::Modality>, Ptr, NoBase, 0, ".linemod");
CVPY_TYPE(ColorGradient, linemod_ColorGradient, Ptr<cv::linemod::ColorGradient>, Ptr, linemod_Modality, 0, ".linemod");
CVPY_TYPE(DepthNormal, linemod_DepthNormal, Ptr<cv::linemod::DepthNormal>, Ptr, linemod_Modality, 0, ".linemod");
CVPY_TYPE(Match, linemod_Match, cv::linemod::Match, Match, NoBase, pyopencv_cv_linemod_linemod_Match_Match, ".linemod");
CVPY_TYPE(Detector, linemod_Detector, Ptr<cv::linemod::Detector>, Ptr, NoBase, pyopencv_cv_linemod_linemod_Detector_Detector, ".linemod");
CVPY_TYPE(StructuredLightPattern, structured_light_StructuredLightPattern, Ptr<cv::structured_light::StructuredLightPattern>, Ptr, Algorithm, 0, ".structured_light");
CVPY_TYPE(GrayCodePattern, structured_light_GrayCodePattern, Ptr<cv::structured_light::GrayCodePattern>, Ptr, structured_light_StructuredLightPattern, 0, ".structured_light");
CVPY_TYPE(SinusoidalPattern, structured_light_SinusoidalPattern, Ptr<cv::structured_light::SinusoidalPattern>, Ptr, structured_light_StructuredLightPattern, 0, ".structured_light");
CVPY_TYPE(Params, structured_light_SinusoidalPattern_Params, Ptr<cv::structured_light::SinusoidalPattern::Params>, Ptr, NoBase, pyopencv_cv_structured_light_structured_light_SinusoidalPattern_Params_SinusoidalPattern_Params, ".structured_light.SinusoidalPattern");
CVPY_TYPE(Tracker, Tracker, Ptr<cv::Tracker>, Ptr, Algorithm, 0, "");
CVPY_TYPE(TrackerMIL, TrackerMIL, Ptr<cv::TrackerMIL>, Ptr, Tracker, 0, "");
CVPY_TYPE(TrackerBoosting, TrackerBoosting, Ptr<cv::TrackerBoosting>, Ptr, Tracker, 0, "");
CVPY_TYPE(TrackerMedianFlow, TrackerMedianFlow, Ptr<cv::TrackerMedianFlow>, Ptr, Tracker, 0, "");
CVPY_TYPE(TrackerTLD, TrackerTLD, Ptr<cv::TrackerTLD>, Ptr, Tracker, 0, "");
CVPY_TYPE(TrackerKCF, TrackerKCF, Ptr<cv::TrackerKCF>, Ptr, Tracker, 0, "");
CVPY_TYPE(TrackerGOTURN, TrackerGOTURN, Ptr<cv::TrackerGOTURN>, Ptr, Tracker, 0, "");
CVPY_TYPE(TrackerMOSSE, TrackerMOSSE, Ptr<cv::TrackerMOSSE>, Ptr, Tracker, 0, "");
CVPY_TYPE(MultiTracker, MultiTracker, Ptr<cv::MultiTracker>, Ptr, Algorithm, pyopencv_cv_MultiTracker_MultiTracker, "");
CVPY_TYPE(TrackerCSRT, TrackerCSRT, Ptr<cv::TrackerCSRT>, Ptr, Tracker, 0, "");
CVPY_TYPE(FREAK, xfeatures2d_FREAK, Ptr<cv::xfeatures2d::FREAK>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(StarDetector, xfeatures2d_StarDetector, Ptr<cv::xfeatures2d::StarDetector>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(BriefDescriptorExtractor, xfeatures2d_BriefDescriptorExtractor, Ptr<cv::xfeatures2d::BriefDescriptorExtractor>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(LUCID, xfeatures2d_LUCID, Ptr<cv::xfeatures2d::LUCID>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(LATCH, xfeatures2d_LATCH, Ptr<cv::xfeatures2d::LATCH>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(DAISY, xfeatures2d_DAISY, Ptr<cv::xfeatures2d::DAISY>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(MSDDetector, xfeatures2d_MSDDetector, Ptr<cv::xfeatures2d::MSDDetector>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(VGG, xfeatures2d_VGG, Ptr<cv::xfeatures2d::VGG>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(BoostDesc, xfeatures2d_BoostDesc, Ptr<cv::xfeatures2d::BoostDesc>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(PCTSignatures, xfeatures2d_PCTSignatures, Ptr<cv::xfeatures2d::PCTSignatures>, Ptr, Algorithm, 0, ".xfeatures2d");
CVPY_TYPE(PCTSignaturesSQFD, xfeatures2d_PCTSignaturesSQFD, Ptr<cv::xfeatures2d::PCTSignaturesSQFD>, Ptr, Algorithm, 0, ".xfeatures2d");
CVPY_TYPE(HarrisLaplaceFeatureDetector, xfeatures2d_HarrisLaplaceFeatureDetector, Ptr<cv::xfeatures2d::HarrisLaplaceFeatureDetector>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(SURF, xfeatures2d_SURF, Ptr<cv::xfeatures2d::SURF>, Ptr, Feature2D, 0, ".xfeatures2d");
CVPY_TYPE(DisparityFilter, ximgproc_DisparityFilter, Ptr<cv::ximgproc::DisparityFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(DisparityWLSFilter, ximgproc_DisparityWLSFilter, Ptr<cv::ximgproc::DisparityWLSFilter>, Ptr, ximgproc_DisparityFilter, 0, ".ximgproc");
CVPY_TYPE(EdgeDrawing, ximgproc_EdgeDrawing, Ptr<cv::ximgproc::EdgeDrawing>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(Params, ximgproc_EdgeDrawing_Params, cv::ximgproc::EdgeDrawing::Params, Params, NoBase, pyopencv_cv_ximgproc_ximgproc_EdgeDrawing_Params_EdgeDrawing_Params, ".ximgproc.EdgeDrawing");
CVPY_TYPE(DTFilter, ximgproc_DTFilter, Ptr<cv::ximgproc::DTFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(GuidedFilter, ximgproc_GuidedFilter, Ptr<cv::ximgproc::GuidedFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(AdaptiveManifoldFilter, ximgproc_AdaptiveManifoldFilter, Ptr<cv::ximgproc::AdaptiveManifoldFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(FastBilateralSolverFilter, ximgproc_FastBilateralSolverFilter, Ptr<cv::ximgproc::FastBilateralSolverFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(FastGlobalSmootherFilter, ximgproc_FastGlobalSmootherFilter, Ptr<cv::ximgproc::FastGlobalSmootherFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(EdgeBoxes, ximgproc_EdgeBoxes, Ptr<cv::ximgproc::EdgeBoxes>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(FastLineDetector, ximgproc_FastLineDetector, Ptr<cv::ximgproc::FastLineDetector>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(ContourFitting, ximgproc_ContourFitting, Ptr<cv::ximgproc::ContourFitting>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(SuperpixelLSC, ximgproc_SuperpixelLSC, Ptr<cv::ximgproc::SuperpixelLSC>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(RidgeDetectionFilter, ximgproc_RidgeDetectionFilter, Ptr<cv::ximgproc::RidgeDetectionFilter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(SuperpixelSEEDS, ximgproc_SuperpixelSEEDS, Ptr<cv::ximgproc::SuperpixelSEEDS>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(GraphSegmentation, ximgproc_segmentation_GraphSegmentation, Ptr<cv::ximgproc::segmentation::GraphSegmentation>, Ptr, Algorithm, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentationStrategy, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy>, Ptr, Algorithm, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentationStrategyColor, ximgproc_segmentation_SelectiveSearchSegmentationStrategyColor, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyColor>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentationStrategySize, ximgproc_segmentation_SelectiveSearchSegmentationStrategySize, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategySize>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentationStrategyTexture, ximgproc_segmentation_SelectiveSearchSegmentationStrategyTexture, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyTexture>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentationStrategyFill, ximgproc_segmentation_SelectiveSearchSegmentationStrategyFill, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyFill>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentationStrategyMultiple, ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyMultiple>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, ".ximgproc.segmentation");
CVPY_TYPE(SelectiveSearchSegmentation, ximgproc_segmentation_SelectiveSearchSegmentation, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentation>, Ptr, Algorithm, 0, ".ximgproc.segmentation");
CVPY_TYPE(SuperpixelSLIC, ximgproc_SuperpixelSLIC, Ptr<cv::ximgproc::SuperpixelSLIC>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(SparseMatchInterpolator, ximgproc_SparseMatchInterpolator, Ptr<cv::ximgproc::SparseMatchInterpolator>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(EdgeAwareInterpolator, ximgproc_EdgeAwareInterpolator, Ptr<cv::ximgproc::EdgeAwareInterpolator>, Ptr, ximgproc_SparseMatchInterpolator, 0, ".ximgproc");
CVPY_TYPE(RFFeatureGetter, ximgproc_RFFeatureGetter, Ptr<cv::ximgproc::RFFeatureGetter>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(StructuredEdgeDetection, ximgproc_StructuredEdgeDetection, Ptr<cv::ximgproc::StructuredEdgeDetection>, Ptr, Algorithm, 0, ".ximgproc");
CVPY_TYPE(DetectorParameters, aruco_DetectorParameters, Ptr<cv::aruco::DetectorParameters>, Ptr, NoBase, 0, ".aruco");
CVPY_TYPE(EstimateParameters, aruco_EstimateParameters, Ptr<cv::aruco::EstimateParameters>, Ptr, NoBase, 0, ".aruco");
CVPY_TYPE(Board, aruco_Board, Ptr<cv::aruco::Board>, Ptr, NoBase, 0, ".aruco");
CVPY_TYPE(GridBoard, aruco_GridBoard, Ptr<cv::aruco::GridBoard>, Ptr, aruco_Board, 0, ".aruco");
CVPY_TYPE(CharucoBoard, aruco_CharucoBoard, Ptr<cv::aruco::CharucoBoard>, Ptr, aruco_Board, 0, ".aruco");
CVPY_TYPE(Dictionary, aruco_Dictionary, Ptr<cv::aruco::Dictionary>, Ptr, NoBase, 0, ".aruco");
CVPY_TYPE(BackgroundSubtractorMOG, bgsegm_BackgroundSubtractorMOG, Ptr<cv::bgsegm::BackgroundSubtractorMOG>, Ptr, BackgroundSubtractor, 0, ".bgsegm");
CVPY_TYPE(BackgroundSubtractorGMG, bgsegm_BackgroundSubtractorGMG, Ptr<cv::bgsegm::BackgroundSubtractorGMG>, Ptr, BackgroundSubtractor, 0, ".bgsegm");
CVPY_TYPE(BackgroundSubtractorCNT, bgsegm_BackgroundSubtractorCNT, Ptr<cv::bgsegm::BackgroundSubtractorCNT>, Ptr, BackgroundSubtractor, 0, ".bgsegm");
CVPY_TYPE(BackgroundSubtractorGSOC, bgsegm_BackgroundSubtractorGSOC, Ptr<cv::bgsegm::BackgroundSubtractorGSOC>, Ptr, BackgroundSubtractor, 0, ".bgsegm");
CVPY_TYPE(BackgroundSubtractorLSBP, bgsegm_BackgroundSubtractorLSBP, Ptr<cv::bgsegm::BackgroundSubtractorLSBP>, Ptr, BackgroundSubtractor, 0, ".bgsegm");
CVPY_TYPE(BackgroundSubtractorLSBPDesc, bgsegm_BackgroundSubtractorLSBPDesc, Ptr<cv::bgsegm::BackgroundSubtractorLSBPDesc>, Ptr, NoBase, 0, ".bgsegm");
CVPY_TYPE(SyntheticSequenceGenerator, bgsegm_SyntheticSequenceGenerator, Ptr<cv::bgsegm::SyntheticSequenceGenerator>, Ptr, Algorithm, pyopencv_cv_bgsegm_bgsegm_SyntheticSequenceGenerator_SyntheticSequenceGenerator, ".bgsegm");
CVPY_TYPE(Retina, bioinspired_Retina, Ptr<cv::bioinspired::Retina>, Ptr, Algorithm, 0, ".bioinspired");
CVPY_TYPE(RetinaFastToneMapping, bioinspired_RetinaFastToneMapping, Ptr<cv::bioinspired::RetinaFastToneMapping>, Ptr, Algorithm, 0, ".bioinspired");
CVPY_TYPE(TransientAreasSegmentationModule, bioinspired_TransientAreasSegmentationModule, Ptr<cv::bioinspired::TransientAreasSegmentationModule>, Ptr, Algorithm, 0, ".bioinspired");
CVPY_TYPE(DPMDetector, dpm_DPMDetector, Ptr<cv::dpm::DPMDetector>, Ptr, NoBase, 0, ".dpm");
CVPY_TYPE(ObjectDetection, dpm_DPMDetector_ObjectDetection, Ptr<cv::dpm::DPMDetector::ObjectDetection>, Ptr, NoBase, 0, ".dpm.DPMDetector");
CVPY_TYPE(FaceRecognizer, face_FaceRecognizer, Ptr<cv::face::FaceRecognizer>, Ptr, Algorithm, 0, ".face");
CVPY_TYPE(BIF, face_BIF, Ptr<cv::face::BIF>, Ptr, Algorithm, 0, ".face");
CVPY_TYPE(Facemark, face_Facemark, Ptr<cv::face::Facemark>, Ptr, Algorithm, 0, ".face");
CVPY_TYPE(FacemarkKazemi, face_FacemarkKazemi, Ptr<cv::face::FacemarkKazemi>, Ptr, face_Facemark, 0, ".face");
CVPY_TYPE(FacemarkTrain, face_FacemarkTrain, Ptr<cv::face::FacemarkTrain>, Ptr, face_Facemark, 0, ".face");
CVPY_TYPE(FacemarkAAM, face_FacemarkAAM, Ptr<cv::face::FacemarkAAM>, Ptr, face_FacemarkTrain, 0, ".face");
CVPY_TYPE(FacemarkLBF, face_FacemarkLBF, Ptr<cv::face::FacemarkLBF>, Ptr, face_FacemarkTrain, 0, ".face");
CVPY_TYPE(BasicFaceRecognizer, face_BasicFaceRecognizer, Ptr<cv::face::BasicFaceRecognizer>, Ptr, face_FaceRecognizer, 0, ".face");
CVPY_TYPE(EigenFaceRecognizer, face_EigenFaceRecognizer, Ptr<cv::face::EigenFaceRecognizer>, Ptr, face_BasicFaceRecognizer, 0, ".face");
CVPY_TYPE(FisherFaceRecognizer, face_FisherFaceRecognizer, Ptr<cv::face::FisherFaceRecognizer>, Ptr, face_BasicFaceRecognizer, 0, ".face");
CVPY_TYPE(LBPHFaceRecognizer, face_LBPHFaceRecognizer, Ptr<cv::face::LBPHFaceRecognizer>, Ptr, face_FaceRecognizer, 0, ".face");
CVPY_TYPE(MACE, face_MACE, Ptr<cv::face::MACE>, Ptr, Algorithm, 0, ".face");
CVPY_TYPE(PredictCollector, face_PredictCollector, Ptr<cv::face::PredictCollector>, Ptr, NoBase, 0, ".face");
CVPY_TYPE(StandardCollector, face_StandardCollector, Ptr<cv::face::StandardCollector>, Ptr, face_PredictCollector, 0, ".face");
CVPY_TYPE(VariationalRefinement, optflow_VariationalRefinement, Ptr<cv::optflow::VariationalRefinement>, Ptr, DenseOpticalFlow, 0, ".optflow");
CVPY_TYPE(DISOpticalFlow, optflow_DISOpticalFlow, Ptr<cv::optflow::DISOpticalFlow>, Ptr, DenseOpticalFlow, 0, ".optflow");
CVPY_TYPE(PCAPrior, optflow_PCAPrior, Ptr<cv::optflow::PCAPrior>, Ptr, NoBase, 0, ".optflow");
CVPY_TYPE(OpticalFlowPCAFlow, optflow_OpticalFlowPCAFlow, Ptr<cv::optflow::OpticalFlowPCAFlow>, Ptr, DenseOpticalFlow, 0, ".optflow");
CVPY_TYPE(GPCPatchDescriptor, optflow_GPCPatchDescriptor, Ptr<cv::optflow::GPCPatchDescriptor>, Ptr, NoBase, 0, ".optflow");
CVPY_TYPE(GPCPatchSample, optflow_GPCPatchSample, Ptr<cv::optflow::GPCPatchSample>, Ptr, NoBase, 0, ".optflow");
CVPY_TYPE(GPCTrainingSamples, optflow_GPCTrainingSamples, Ptr<cv::optflow::GPCTrainingSamples>, Ptr, NoBase, 0, ".optflow");
CVPY_TYPE(GPCTree, optflow_GPCTree, Ptr<cv::optflow::GPCTree>, Ptr, Algorithm, 0, ".optflow");
CVPY_TYPE(GPCDetails, optflow_GPCDetails, Ptr<cv::optflow::GPCDetails>, Ptr, NoBase, 0, ".optflow");
CVPY_TYPE(libmv_CameraIntrinsicsOptions, sfm_libmv_CameraIntrinsicsOptions, cv::sfm::libmv_CameraIntrinsicsOptions, libmv_CameraIntrinsicsOptions, NoBase, pyopencv_cv_sfm_sfm_libmv_CameraIntrinsicsOptions_libmv_CameraIntrinsicsOptions, ".sfm");
CVPY_TYPE(libmv_ReconstructionOptions, sfm_libmv_ReconstructionOptions, cv::sfm::libmv_ReconstructionOptions, libmv_ReconstructionOptions, NoBase, pyopencv_cv_sfm_sfm_libmv_ReconstructionOptions_libmv_ReconstructionOptions, ".sfm");
CVPY_TYPE(BaseSFM, sfm_BaseSFM, Ptr<cv::sfm::BaseSFM>, Ptr, NoBase, 0, ".sfm");
CVPY_TYPE(SFMLibmvEuclideanReconstruction, sfm_SFMLibmvEuclideanReconstruction, Ptr<cv::sfm::SFMLibmvEuclideanReconstruction>, Ptr, sfm_BaseSFM, 0, ".sfm");
CVPY_TYPE(Stitcher, Stitcher, Ptr<cv::Stitcher>, Ptr, NoBase, 0, "");
